from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode

from config import bot


#@dp.callback_query_handler(lambda coll: coll.data == "button_call_1")
async def quez_2(coll: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_2 = InlineKeyboardButton(
        "NEXT",
        callback_data='button_call_2'
    )
    markup.add(button_call_2)

    question = '–ö–æ–≥–¥–∞ –ê–¥–æ–ª—å—Ñ –ì–∏—Ç–ª–µ—Ä —Å–æ–≤–µ—Ä—à–∏–ª —Å–∞–º–æ—É–±–∏–π—Ç–≤–æ?'
    answers = [
        '30-–∞–ø—Ä–µ–ª—è,1945-–≥–æ–¥—É',
        '29-–∞–ø—Ä–µ–ª—è,1945–≥–æ–¥—É',
        '28-–∞–ø—Ä–µ–ª—å,1945-–≥–æ–¥—É',
        '1945-–≥–æ–¥—É'
    ]
    await bot.send_poll(
        chat_id=coll.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=0,
        explanation="—Å–∞–º –¥—É–º–∞–π",
        explanation_parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=markup
    )

async def quiz3(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call4 = InlineKeyboardButton("next", callback_data="button_call4")
    markup.add(button_call4)
    question1 = "–í –∫–∞–∫–æ–º –≥–æ–¥—É ?"
    answers1 = ['–¥–∞', '–Ω–µ—Ç', '2000', '20011']
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question1,
        options=answers1,
        is_anonymous=False,
        type='quiz',
        correct_option_id=3,
        explanation_parse_mode=ParseMode.MARKDOWN_V2,

    )

async def q_1(call: types.CallbackQuery):
    await bot.send_message(call.message.chat.id, "–ë–∏—à–æ–ø-–†–æ–∫, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",)

async def q_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_7 = InlineKeyboardButton(
        "–¢–æ–∫–∏–æ üáØüáµ",
        callback_data='button_call_7'
    )
    button_call_8 = InlineKeyboardButton(
        "–ú–∞–Ω–∏–ª–∞ üáµüá≠",
        callback_data='button_call_8'
    )
    markup.add(button_call_7,button_call_8)

    await bot.send_message(call.message.chat.id, "–≤ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Ö–æ—á–µ—à—å –ø–æ–ª–µ—Ç–µ—Ç—å?",
                           reply_markup=markup)

async def q_3(call: types.CallbackQuery):
    await bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ç—Ä–∞–Ω—É –í–æ—Å—Ö–æ–¥—è—â–µ–≥–æ –°–æ–ª–Ω—Ü–µ",)

async def q_4(call: types.CallbackQuery):
    await bot.send_message(call.message.chat.id, "–¥–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –í –≥–æ—Ä–æ–¥ –ú–∞–Ω–∏–ª–∞",)

def register_handlers_callback(dp: Dispatcher):
    dp.register_callback_query_handler(quez_2, lambda coll: coll.data == "button_call_1")
    dp.register_callback_query_handler(quiz3, lambda coll: coll.data == "button_call_2")
    dp.register_callback_query_handler(q_1, lambda coll: coll.data == "button_call_5")
    dp.register_callback_query_handler(q_2, lambda coll: coll.data == "button_call_6")
    dp.register_callback_query_handler(q_3, lambda coll: coll.data == "button_call_7")
    dp.register_callback_query_handler(q_4, lambda coll: coll.data == "button_call_8")


